// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Api.Models;

namespace Api.Data
{
    public partial class QlreportContext : DbContext
    {
        public QlreportContext()
        {
        }

        public QlreportContext(DbContextOptions<QlreportContext> options)
            : base(options)
        {
        }

        public  DbSet<Account> Accounts { get; set; }
        public  DbSet<CouncilEvaluation> CouncilEvaluations { get; set; }
        public  DbSet<Group> Groups { get; set; }
        public  DbSet<Project> Projects { get; set; }
        public  DbSet<Report> Reports { get; set; }
        public  DbSet<Role> Roles { get; set; }
        public  DbSet<Submit> Submits { get; set; }
        public  DbSet<TeacherEvaluation> TeacherEvaluations { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Role");

                entity.HasMany(d => d.Groups)
                    .WithMany(p => p.Accounts)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccountGroup",
                        l => l.HasOne<Group>().WithMany().HasForeignKey("GroupId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Account_Group_Group"),
                        r => r.HasOne<Account>().WithMany().HasForeignKey("AccountId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Account_Group_Account"),
                        j =>
                        {
                            j.HasKey("AccountId", "GroupId");

                            j.ToTable("Account_Group");

                            j.IndexerProperty<string>("AccountId").HasMaxLength(50);
                        });
            });

            modelBuilder.Entity<CouncilEvaluation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CouncilEvaluations)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouncilEvaluation_Group");
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.HasOne(d => d.Projet)
                    .WithMany(p => p.Groups)
                    .HasForeignKey(d => d.ProjetId)
                    .HasConstraintName("FK_Group_Project");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Submit>(entity =>
            {
                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Submits)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Submit_Project");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.Submits)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Submit_Report");
            });

            modelBuilder.Entity<TeacherEvaluation>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Submit)
                    .WithMany(p => p.TeacherEvaluations)
                    .HasForeignKey(d => d.SubmitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeacherEvaluation_Submit");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeacherEvaluations)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeacherEvaluation_Account");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}